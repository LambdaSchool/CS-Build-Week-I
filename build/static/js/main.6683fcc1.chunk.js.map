{"version":3,"sources":["Components/Game/Game.jsx","Components/Rules/Rules.jsx","Components/About/About.jsx","Components/Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleGrid","curGrid","state","nextGrid","setState","createGrid","TotalNodesX","props","componentWidth","TotalNodesY","componentHeight","Math","round","floor","gridSize","firstGrid","curX","curY","i","newArr","j","push","x","y","isAlive","coordX","coordY","secondGrid","Grid","NextGrid","requestAnimationFrame","canvasApp","myCanvas","document","getElementById","ctx","getContext","Width","Height","width","height","w","h","lineWidth","moveTo","lineTo","strokeStyle","stroke","isRunning","incrementGameLoop","forEach","verticalArr","node","beginPath","rect","fillStyle","fill","drawScreen","timer","setTimeout","gameSpeed","newGrid","yAxisArr","assign","lifeAlgorithm","lastGrid","generation","screenGrid","neighbors","getNeighbors","numAlive","nearAlive","keys","key","num","curNodeX","curNodeY","grid","neighborsObj","curNeighbor","newI","newJ","length","handleGridClick","event","getBoundingClientRect","newX","clientX","left","newY","clientY","top","nodeNumberX","nodeNumberY","console","log","concat","handleWheel","deltaY","startStopGame","startNow","clearTimeout","resetGame","gridToReset","Grids","preset","randomizeGame","random","makeAcorn","stepThroughGame","handlePresetChange","target","value","makeGlider","makeGosper","handleGridSizeChange","size","gridSizeString","handleSlider","container","React","createRef","classes","react_default","a","createElement","className","gameContainer","ref","id","onClick","onWheel","style","marginTop","sliderGridSizeContainer","gameSpeedContainer","index_es","Slider_default","slider","aria-labelledby","onChange","gameControls","TextField_default","readOnly","label","generationField","margin","variant","buttonContainer","color","iconButton","Pause_default","gutterBottom","align","PlayArrow_default","RepeatOne_default","Restore_default","formControl","htmlFor","input","name","select","Component","withStyles","theme","display","justifyContent","flexDirection","alignItems","marginBottom","paddingBotton","padding","gridSizeContainer","Home","homeContainer","gridCard","paddingTop","gameGridItem","minWidth","maxWidth","item","xs","spacing","justify","topCard","Components_Game_Game","gridHeight","gridWidth","sm","md","bottomCard","Rules","About","App","Components_Home_Home","Boolean","window","location","hostname","match","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","typography","useNextVariants","ReactDOM","render","styles","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6683fcc1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { withStyles, } from '@material-ui/core/styles';\r\nimport  TextField  from '@material-ui/core/TextField';\r\nimport  Button  from '@material-ui/core/Button';\r\nimport {Typography, IconButton, InputLabel, List, MenuItem, FormControl, Select, Input, FormHelperText, } from '@material-ui/core';\r\nimport PlayArrow from '@material-ui/icons/PlayArrow'\r\nimport Pause from '@material-ui/icons/Pause'\r\nimport RepeatOne from '@material-ui/icons/RepeatOne'\r\nimport Slider from '@material-ui/lab/Slider';\r\nimport Restore from '@material-ui/icons/Restore'\r\n\r\n// grid nodes are {x: 0, y:0, xz:gridSize, yz:gridSize}\r\n\r\nconst styles = theme => ({\r\n   gameContainer: {\r\n     display: 'flex',\r\n     justifyContent: 'center',\r\n     flexDirection: 'column',\r\n     alignItems: 'center',\r\n     width: '100%',\r\n     generation: 0,\r\n   },\r\n   gameControls: {\r\n      display: 'flex',\r\n      width:'100%',\r\n      justifyContent: 'space-between',\r\n   },\r\n   generationField: {\r\n      width: '175px'\r\n   },\r\n   formControl: {\r\n       width: '120px',\r\n   },\r\n   buttonContainer: {\r\n      marginTop: '5px'\r\n   },\r\n   iconButton: {\r\n      marginBottom: '0px',\r\n      paddingBotton: '0px'\r\n   },\r\n   sliderGridSizeContainer: {\r\n     display: 'flex',\r\n     justifyContent: 'center',\r\n    width: '100%',\r\n  },\r\n   slider: {\r\n      padding: '22px 0px',\r\n      width:'100%'\r\n    },\r\n    gameSpeedContainer: {\r\n      width: '45%'\r\n    },\r\n   gridSizeContainer: {\r\n      width: '45%'\r\n   },\r\n   select: {\r\n      // color: 'white',\r\n      // '&:before': {\r\n      //     borderColor: 'white',\r\n      // },\r\n      // '&:after': {\r\n      //     borderColor: 'white',\r\n      // }\r\n  },\r\n\r\n})\r\n\r\nclass Game extends Component {\r\n\r\n   constructor(){\r\n      super()\r\n      this.state = {\r\n         TotalNodesX: 0,\r\n         TotalNodesY: 0,\r\n         curGrid: 'Grid',\r\n         nextGrid: 'NextGrid',\r\n         Grid: [],\r\n         NextGrid: [],\r\n         isRunning: false,\r\n         gridSize : 12,\r\n         generation : 0,\r\n         preset: \"\",\r\n         gameSpeed: 500,\r\n         gridSizeString: '',\r\n      }\r\n      this.container = React.createRef();\r\n      this.timer = null;\r\n   }\r\n\r\n   toggleGrid = () => {\r\n      let curGrid = this.state.curGrid;\r\n      let nextGrid = this.state.nextGrid;\r\n\r\n      if(curGrid === 'Grid'){\r\n         curGrid = 'NextGrid'\r\n         nextGrid = 'Grid'\r\n      }else{\r\n         curGrid = 'Grid'\r\n         nextGrid = 'NextGrid'\r\n      }\r\n\r\n      this.setState({curGrid})\r\n   }\r\n\r\n   componentDidMount() {\r\n     this.createGrid()\r\n   }\r\n\r\n   createGrid = () => {\r\n    const width = this.props.componentWidth;\r\n    const height = this.props.componentHeight;\r\n\r\n    let TotalNodesX = width\r\n    let TotalNodesY = height\r\n\r\n    TotalNodesX = Math.round(Math.floor(TotalNodesX / this.state.gridSize));\r\n    TotalNodesY = Math.round(Math.floor(TotalNodesY / this.state.gridSize));\r\n\r\n    const firstGrid = [];\r\n\r\n    let curX = 0;\r\n    let curY = 0;\r\n    for (let i = 0; i < TotalNodesX; i++){\r\n       if(i !== 0) curX += this.state.gridSize;\r\n       const newArr = [];\r\n    \r\n       for(let j = 0; j < TotalNodesY; j++){\r\n          if(j === 0) curY = 0;\r\n          else curY += this.state.gridSize;\r\n          newArr.push({x: curX, y: curY, isAlive: false, coordX: i, coordY: j})\r\n       }\r\n    \r\n       firstGrid.push(newArr)\r\n    }\r\n\r\n    const secondGrid = [];\r\n\r\n     curX = 0;\r\n     curY = 0;\r\n    for (let i = 0; i < TotalNodesX; i++){\r\n       if(i !== 0) curX += this.state.gridSize;\r\n       const newArr = [];\r\n    \r\n       for(let j = 0; j < TotalNodesY; j++){\r\n          if(j === 0) curY = 0;\r\n          else curY += this.state.gridSize;\r\n          newArr.push({x: curX, y: curY, isAlive: false, coordX: i, coordY: j})\r\n       }\r\n    \r\n       secondGrid.push(newArr)\r\n    }\r\n\r\n    this.setState({Grid: firstGrid, NextGrid: secondGrid, TotalNodesX, TotalNodesY, })\r\n    requestAnimationFrame(() => this.canvasApp())\r\n   }\r\n\r\n   canvasApp = () => {\r\n      var myCanvas = document.getElementById('myCanvas');\r\n      if(!myCanvas) return\r\n      var ctx = myCanvas.getContext('2d');\r\n    \r\n      const Width = this.state.gridSize * this.state.TotalNodesX;\r\n      const Height = this.state.gridSize * this.state.TotalNodesY;\r\n    \r\n      myCanvas.width = Width;\r\n      myCanvas.height = Height;\r\n    \r\n    \r\n      const drawScreen = () => {\r\n    \r\n       //init grid square size\r\n        const dx = this.state.gridSize;\r\n        const dy = this.state.gridSize;\r\n    \r\n       \r\n        var x = 0;\r\n        var y = 0;\r\n        var w = myCanvas.width;\r\n        var h = myCanvas.height;\r\n    \r\n        var xy = 10;\r\n    \r\n        ctx.lineWidth = 1;\r\n    \r\n        ctx.moveTo(x, y);\r\n        ctx.lineTo(w, y);\r\n        ctx.strokeStyle=\"grey\";\r\n        ctx.stroke();\r\n        // draw horizontal lines\r\n        while (y < h) {\r\n           y = y + this.state.gridSize;\r\n           ctx.moveTo(x, y);\r\n           ctx.lineTo(w, y);\r\n           ctx.strokeStyle=\"grey\";\r\n           ctx.stroke();\r\n        }\r\n    \r\n        //draw vertical lines\r\n        y = 0;\r\n        xy = 10;\r\n        ctx.moveTo(x, y);\r\n        ctx.lineTo(x, h);\r\n        ctx.stroke();\r\n        while (x < w) {\r\n           x = x + this.state.gridSize;\r\n           ctx.moveTo(x, y);\r\n           ctx.lineTo(x, h);\r\n           ctx.stroke();\r\n        }\r\n\r\n         if(this.state.isRunning){\r\n            this.incrementGameLoop()\r\n         }\r\n\r\n         // draw a box (each square is this.state.gridSizepx wide and )\r\n         this.state[this.state.curGrid].forEach((verticalArr, i) => {\r\n            verticalArr.forEach((node, j) => {\r\n               if(node.isAlive){\r\n                  ctx.beginPath()\r\n                  ctx.rect(node.x, node.y, this.state.gridSize,this.state.gridSize)\r\n                  ctx.fillStyle = \"black\"\r\n                  ctx.fill();\r\n               }else{\r\n                  ctx.beginPath()\r\n                  ctx.rect(node.x+1, node.y+1, this.state.gridSize-2,this.state.gridSize-2)\r\n                  ctx.fillStyle = \"white\"\r\n                  ctx.fill();\r\n               }\r\n            })\r\n         })\r\n         \r\n      }\r\n      drawScreen();\r\n      if(this.state.isRunning){\r\n         this.timer = setTimeout(() => {requestAnimationFrame(() => this.canvasApp())}, 100 - this.state.gameSpeed)\r\n      }\r\n      \r\n\r\n    }//end canvasApp\r\n\r\n   incrementGameLoop = () => {\r\n      let newGrid = []\r\n      this.state[this.state.curGrid].forEach((verticalArr, i) => {\r\n         const yAxisArr = [];\r\n         verticalArr.forEach((node, j) => {\r\n            yAxisArr.push(Object.assign({}, node))\r\n         })\r\n         newGrid.push(yAxisArr)\r\n      })\r\n\r\n      newGrid = this.lifeAlgorithm(newGrid)\r\n\r\n      const lastGrid = this.state[this.state.curGrid]\r\n\r\n      //swap before state swap so this looks backwards right now\r\n      // this.toggleGrid()\r\n\r\n\r\n      this.setState({Grid: newGrid, NextGrid: lastGrid, generation: this.state.generation + 1})\r\n   }\r\n\r\n   lifeAlgorithm = (newGrid) => {\r\n     //get neighbors and run 4 rules of life\r\n\r\n     // screenGrid is where all nodes are checked (and what is currently displayed on screen)\r\n     //nextGrid is where all changes are made\r\n     const screenGrid = this.state.Grid\r\n\r\n      this.state.Grid.forEach((verticalArr, i) => {\r\n         verticalArr.forEach((node, j) => {\r\n            const neighbors = this.getNeighbors(screenGrid, i,j);\r\n\r\n            //count the living neighbors\r\n            let numAlive = 0;\r\n            const nearAlive = []\r\n            Object.keys(neighbors).forEach(key => {\r\n            const node = neighbors[key]\r\n            if(node.isAlive) {\r\n               numAlive += 1;\r\n               // console.log({num: key, curNodeX: i, curNodeY: j, aliveX: node.coordX, aliveY: node.coordY})\r\n            } else nearAlive.push({num:key, curNodeX: node.coordX, curNodeY: node.coordY })\r\n            })\r\n\r\n            const curNode = newGrid[i][j]\r\n            // if(numAlive > 0 && curNode.isAlive) console.log({x: curNode.coordX, y: curNode.coordY})\r\n            if( newGrid[i][j].isAlive && numAlive < 2 ) newGrid[i][j].isAlive = false; //Any live cell with fewer than two live neighbours dies (referred to as underpopulation or exposure[1]).\r\n            else if( !newGrid[i][j].isAlive && numAlive === 3 ) newGrid[i][j].isAlive = true; //Any dead cell with exactly three live neighbours will come to life.\r\n            else if( numAlive > 3 && newGrid[i][j].isAlive ) newGrid[i][j].isAlive = false; //Any live cell with more than three live neighbours dies (referred to as overpopulation or overcrowding).\r\n            else if( newGrid[i][j].isAlive && (numAlive >= 2 && numAlive <= 3)  ) newGrid[i][j].isAlive = true; //Any live cell with two or three live neighbours lives, unchanged, to the next generation.\r\n\r\n         })\r\n      })//finshed grid check\r\n      \r\n      \r\n      return newGrid;\r\n   }\r\n\r\n   getNeighbors = (grid, i, j) => {\r\n      const neighborsObj = {};\r\n      const curNode = grid[i][j];\r\n      \r\n      let curNeighbor = 1;\r\n      while(curNeighbor < 9){\r\n        let newI = i;\r\n        let newJ = j;\r\n         switch(curNeighbor){\r\n           case 1: newJ--;\r\n                   if(!grid[newI][newJ]) newJ = grid[newI].length - 1\r\n                   break;\r\n           case 2: newI++;\r\n                   if(!grid[newI]) newI = 0;\r\n                   newJ--;\r\n                   if(!grid[newI][newJ]) newJ = grid[newI].length - 1\r\n                   break;\r\n           case 3: newI++;\r\n                   if(!grid[newI]) newI = 0;\r\n                   break;\r\n           case 4: newI++;\r\n                   if(!grid[newI]) newI = 0;\r\n                   newJ++;\r\n                   if(!grid[newI][newJ]) newJ = 0;\r\n                   break;\r\n           case 5: newJ++;\r\n                   if(!grid[newI][newJ]) newJ = 0;\r\n                   break;\r\n           case 6: newI--;\r\n                   if(!grid[newI]) newI = grid.length - 1\r\n                   newJ++;\r\n                   if(!grid[newI][newJ]) newJ = 0;\r\n                   break;\r\n           case 7: newI--;\r\n                   if(!grid[newI]) newI = grid.length - 1\r\n                   break;\r\n           case 8: newI--;\r\n                   if(!grid[newI]) newI = grid.length - 1\r\n                   newJ--;\r\n                   if(!grid[newI][newJ]) newJ = grid[newI].length - 1\r\n         }\r\n\r\n         // if(i === 0 && j === 0)console.log(`num:${Object.keys(neighborsObj).length + 1} i:${newI} j:${newJ} liveNodeX:${i} j:${j}`)\r\n\r\n         neighborsObj[curNeighbor] = Object.assign({}, grid[newI][newJ])\r\n\r\n        curNeighbor++;\r\n      }//end while\r\n\r\n      // if(this.state.x && this.state.y && this.state.x ==i && this.state.y == j){\r\n      //    console.log(neighborsObj)\r\n      // } \r\n\r\n      return neighborsObj;\r\n   }\r\n\r\n    handleGridClick = event => {\r\n      if(!this.state.isRunning){\r\n\r\n         const rect = document.getElementById('myCanvas').getBoundingClientRect()\r\n\r\n         let newX = event.clientX - rect.left;\r\n         let newY = event.clientY - rect.top;\r\n\r\n         const nodeNumberX = Math.floor(newX / this.state.gridSize)\r\n         const nodeNumberY = Math.floor(newY / this.state.gridSize)\r\n\r\n         const curGrid = this.state.Grid\r\n         \r\n         if(curGrid[nodeNumberX] && curGrid[nodeNumberX][nodeNumberY]){\r\n            curGrid[nodeNumberX][nodeNumberY].isAlive = !curGrid[nodeNumberX][nodeNumberY].isAlive\r\n            console.log(`clicked: x:${curGrid[nodeNumberX][nodeNumberY].coordX}, y: ${curGrid[nodeNumberX][nodeNumberY].coordY}`)\r\n         }\r\n\r\n         this.setState({Grid: curGrid})\r\n         this.canvasApp()\r\n       }\r\n   }\r\n\r\n   handleWheel = event => {\r\n      if(event.deltaY > 0){\r\n         console.log('wheelDown')\r\n      }else console.log('wheelup')\r\n   }\r\n\r\n   startStopGame = () => {\r\n      const startNow = !this.state.isRunning\r\n\r\n      this.setState({ isRunning: !this.state.isRunning, })\r\n\r\n      if(startNow) this.timer = setTimeout(() => {requestAnimationFrame(() => this.canvasApp())}, 100 - this.state.gameSpeed)\r\n      else clearTimeout(this.timer)\r\n   }\r\n\r\n   resetGame = () => {\r\n      this.setState({isRunning: false})\r\n\r\n      const gridToReset = this.state.Grid\r\n\r\n      gridToReset.forEach((verticalArr, i) => {\r\n         verticalArr.forEach((node, j) => {\r\n            node.isAlive = false;\r\n         })\r\n      })\r\n\r\n      this.setState({Grids: gridToReset })\r\n      this.canvasApp();\r\n      this.setState({ generation: 0, preset: ''})\r\n   }\r\n\r\n   randomizeGame = () => {\r\n      this.setState({isRunning: false, generation: 0})\r\n\r\n      const gridToReset = this.state.Grid\r\n\r\n      gridToReset.forEach((verticalArr, i) => {\r\n         verticalArr.forEach((node, j) => {\r\n            node.isAlive = false;\r\n            const roll = Math.round(Math.random()*10);\r\n            if (roll > 8) node.isAlive = true;\r\n         })\r\n      })\r\n\r\n      this.setState({Grid: gridToReset})\r\n      this.canvasApp();\r\n   }\r\n\r\n   makeAcorn = () => {\r\n      this.resetGame();\r\n\r\n      //get start node\r\n      const firstX = Math.round((this.state.TotalNodesX / 2) - this.state.TotalNodesX / 4)\r\n      const firstY = Math.round(this.state.TotalNodesY / 2)\r\n      let x = firstX\r\n      let y = firstY\r\n\r\n      this.setState({x, y})//use to debug conway rule error with neighbors (maybe double buffer grid error)\r\n\r\n      const newGrid = this.state.Grid\r\n\r\n      newGrid[x][y].isAlive = true;\r\n      x++\r\n      newGrid[x][y].isAlive = true;\r\n      y -= 2;\r\n      newGrid[x][y].isAlive = true;\r\n      x+=2;\r\n      y++;\r\n      newGrid[x][y].isAlive = true;\r\n      y++;\r\n      x++;\r\n      newGrid[x][y].isAlive = true;\r\n      x++\r\n      newGrid[x][y].isAlive = true;\r\n      x++\r\n      newGrid[x][y].isAlive = true;\r\n\r\n      this.canvasApp()\r\n   }\r\n\r\n   stepThroughGame = () => {\r\n      this.incrementGameLoop()\r\n      this.canvasApp();\r\n   }\r\n\r\n   handlePresetChange = event => {\r\n      if(event.target.value === 'Acorn') this.makeAcorn();\r\n      else if (event.target.value === 'Random') this.randomizeGame()\r\n      else if (event.target.value === 'Glider') this.makeGlider()\r\n      else if (event.target.value === 'Gosper') this.makeGosper();\r\n\r\n      this.setState({ preset: event.target.value });\r\n   };\r\n\r\n   handleGridSizeChange = event => {\r\n     this.resetGame()\r\n      console.log(event.target.value)\r\n      let size;\r\n      if(event.target.value === 'Largest') size = 25;\r\n      else if(event.target.value === 'Large') size = 20;\r\n      else if(event.target.value === 'Medium') size = 15;\r\n      else if(event.target.value === 'Small') size = 10;\r\n      else if(event.target.value === 'Smallest') size = 5;\r\n      console.log(size)\r\n      this.setState({ gridSize: size, gridSizeString: event.target.value });\r\n      this.createGrid();\r\n   };\r\n\r\n   handleSlider = (event, value) => {\r\n      this.setState({gameSpeed: value})\r\n   }\r\n\r\n   makeGlider = () => {\r\n    this.resetGame();\r\n\r\n    //get start node\r\n    const firstX = Math.round((this.state.TotalNodesX / 2) - this.state.TotalNodesX / 4)\r\n    const firstY = Math.round(this.state.TotalNodesY / 2)\r\n    let x = firstX\r\n    let y = firstY\r\n\r\n    this.setState({x, y})//use to debug conway rule error with neighbors (maybe double buffer grid error)\r\n\r\n    const newGrid = this.state.Grid\r\n\r\n    newGrid[x][y].isAlive = true;\r\n    x++\r\n    newGrid[x][y].isAlive = true;\r\n    y -= 2;\r\n    newGrid[x][y].isAlive = true;\r\n    x++;\r\n    y++;\r\n    newGrid[x][y].isAlive = true;\r\n    y++;\r\n    newGrid[x][y].isAlive = true;\r\n\r\n    this.canvasApp()\r\n   }\r\n\r\n   makeGosper = () => {\r\n    this.resetGame();\r\n\r\n    //get start node\r\n    const firstX = 1\r\n    const firstY = 8\r\n    let x = firstX\r\n    let y = firstY\r\n\r\n    this.setState({x, y})//use to debug conway rule error with neighbors (maybe double buffer grid error)\r\n\r\n    const newGrid = this.state.Grid\r\n    //first 4square\r\n    newGrid[x][y].isAlive = true;\r\n    y++\r\n    newGrid[x][y].isAlive = true;\r\n    x++\r\n    newGrid[x][y].isAlive = true;\r\n    y--;\r\n    newGrid[x][y].isAlive = true;\r\n\r\n    //donut\r\n    x+=7;\r\n    y++;\r\n    newGrid[x][y].isAlive = true;\r\n    y++;\r\n    newGrid[x][y].isAlive = true;\r\n    x++;\r\n    newGrid[x][y].isAlive = true;\r\n    y-=2;\r\n    newGrid[x][y].isAlive = true;\r\n    x++;\r\n    newGrid[x][y].isAlive = true;\r\n    y++;\r\n    newGrid[x][y].isAlive = true;\r\n\r\n    //glider\r\n    x+=6;\r\n    y++;\r\n    newGrid[x][y].isAlive = true;\r\n    y++;\r\n    newGrid[x][y].isAlive = true;\r\n    y++;\r\n    newGrid[x][y].isAlive = true;\r\n    x++;\r\n    y-=2;\r\n    newGrid[x][y].isAlive = true;\r\n    x++;\r\n    y++;\r\n    newGrid[x][y].isAlive = true;\r\n\r\n\r\n    //donut\r\n    y-=4;\r\n    x+=4\r\n    newGrid[x][y].isAlive = true;\r\n    y++;\r\n    newGrid[x][y].isAlive = true;\r\n    x++;\r\n    newGrid[x][y].isAlive = true;\r\n    y-=2;\r\n    newGrid[x][y].isAlive = true;\r\n    x++;\r\n    newGrid[x][y].isAlive = true;\r\n    y++;\r\n    newGrid[x][y].isAlive = true;\r\n\r\n    //glider\r\n    y+=11;\r\n    newGrid[x][y].isAlive = true;\r\n    y++;\r\n    newGrid[x][y].isAlive = true;\r\n    y++;\r\n    x++;\r\n    newGrid[x][y].isAlive = true;\r\n    y-=2;\r\n    newGrid[x][y].isAlive = true;\r\n    x++;\r\n    newGrid[x][y].isAlive = true;\r\n\r\n    //glider\r\n    x+=9;\r\n    y-=3;\r\n    newGrid[x][y].isAlive = true;\r\n    y--;\r\n    newGrid[x][y].isAlive = true;\r\n    y--;\r\n    newGrid[x][y].isAlive = true;\r\n    x++;\r\n    newGrid[x][y].isAlive = true;\r\n    x++;\r\n    y++;\r\n    newGrid[x][y].isAlive = true;\r\n\r\n    //square\r\n\r\n\r\n\r\n    y-=7\r\n    x-=2\r\n    newGrid[x][y].isAlive = true;\r\n    y--;\r\n    newGrid[x][y].isAlive = true;\r\n    x--;\r\n    newGrid[x][y].isAlive = true;\r\n    y++;\r\n    newGrid[x][y].isAlive = true;\r\n\r\n\r\n    this.canvasApp()\r\n   }\r\n   \r\n\r\n   render() {\r\n      const {classes} = this.props\r\n      if(!this.state.isRunning) this.timer = null;\r\n\r\n      return (\r\n         <div className={classes.gameContainer} ref={this.container}>\r\n            <canvas id=\"myCanvas\" width='0' height='0' onClick={this.handleGridClick} onWheel={this.handleWheel} />\r\n\r\n            <hr style={{width: '100%', marginTop: '20px'}}></hr>\r\n            <div className={classes.sliderGridSizeContainer}>\r\n\r\n              <div className={classes.gameSpeedContainer} >\r\n                <Typography id=\"label\">Game Speed</Typography>\r\n                <Slider\r\n                    classes={{ container: classes.slider }}\r\n                    value={this.state.gameSpeed}\r\n                    aria-labelledby=\"label\"\r\n                    onChange={this.handleSlider}\r\n                />\r\n              </div>\r\n\r\n              {/* <div className={classes.gridSizeContainer}>\r\n                <FormControl id='GridPicker' className={this.props.classes.formControl} color={'inherit'}>\r\n                  <InputLabel htmlFor=\"gridSize-helper\">Grid Size</InputLabel>\r\n                     <Select\r\n                        value={this.state.gridSizeString}\r\n                        onChange={this.handleGridSizeChange}\r\n                        input={<Input name=\"gridSize\" id=\"gridSize-helper\" />}\r\n                        className={this.props.classes.select}\r\n                     >\r\n\r\n                        <MenuItem value={'Largest'}>\r\n                           Largest\r\n                        </MenuItem>\r\n\r\n                        <MenuItem value={'Large'}>\r\n                           Large\r\n                        </MenuItem>\r\n\r\n                        <MenuItem value={'Medium'}>\r\n                           Medium\r\n                        </MenuItem>\r\n\r\n                        <MenuItem value={'Small'}>\r\n                           Small\r\n                        </MenuItem>\r\n\r\n                        <MenuItem value={'Smallest'}>\r\n                           Smallest\r\n                        </MenuItem>\r\n\r\n                     </Select>\r\n                     <FormHelperText className={this.props.classes.select}>Select a layout</FormHelperText>\r\n                </FormControl>\r\n              </div> */}\r\n            </div>\r\n\r\n            <div className={classes.gameControls}>\r\n\r\n               <TextField\r\n                  readOnly\r\n                  id=\"outlined-uncontrolled\"\r\n                  label=\"Generation\"\r\n                  className={classes.generationField}\r\n                  margin=\"normal\"\r\n                  variant=\"outlined\"\r\n                  value={this.state.generation}\r\n               />\r\n               {this.state.isRunning ? \r\n                  <div className={classes.buttonContainer}>\r\n                     <IconButton onClick={this.startStopGame} color='primary' className={classes.iconButton}>\r\n                        <Pause/>\r\n                     </IconButton>\r\n\r\n                     <Typography variant=\"caption\" gutterBottom align=\"center\">\r\n                        Pause\r\n                     </Typography>\r\n                  </div>\r\n                  :\r\n                  <div className={classes.buttonContainer}>\r\n                     <IconButton onClick={this.startStopGame} color='primary' className={classes.iconButton}>\r\n                        <PlayArrow/>\r\n                     </IconButton>\r\n\r\n                     <Typography variant=\"caption\" gutterBottom align=\"center\">\r\n                        Play\r\n                     </Typography>\r\n                  </div>\r\n               }\r\n\r\n                  <div className={classes.buttonContainer}>\r\n                     <IconButton onClick={this.stepThroughGame} color='secondary'>\r\n                        <RepeatOne/>\r\n                     </IconButton>\r\n                     <Typography variant=\"caption\" gutterBottom align=\"center\">\r\n                        Step\r\n                     </Typography>\r\n                  </div>\r\n                  \r\n                  <div className={classes.buttonContainer}>\r\n                     <IconButton onClick={this.resetGame}>\r\n                        <Restore/>\r\n                     </IconButton>\r\n                     <Typography variant=\"caption\" gutterBottom align=\"center\">\r\n                        Reset\r\n                     </Typography>\r\n                  </div>\r\n\r\n               <FormControl id='presets' className={this.props.classes.formControl} color={'inherit'}>\r\n                  <InputLabel htmlFor=\"preset-helper\">Presets</InputLabel>\r\n                     <Select\r\n                        value={this.state.preset}\r\n                        onChange={this.handlePresetChange}\r\n                        input={<Input name=\"preset\" id=\"preset-helper\" />}\r\n                        className={this.props.classes.select}\r\n                     >\r\n\r\n                        <MenuItem value='Random'>\r\n                           Random\r\n                        </MenuItem>\r\n\r\n                        <MenuItem value='Acorn'>\r\n                           Acorn\r\n                        </MenuItem>\r\n\r\n                        <MenuItem value='Glider'>\r\n                           Glider\r\n                        </MenuItem>\r\n\r\n                        <MenuItem value='Gosper'>\r\n                           Gosper Glider Gun\r\n                        </MenuItem>\r\n\r\n                     </Select>\r\n                     <FormHelperText className={this.props.classes.select}>Select a layout</FormHelperText>\r\n               </FormControl>\r\n               \r\n            </div>\r\n\r\n         </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Game);\r\n","import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {Grid,Card, Paper, CardContent, CardHeader, Typography} from '@material-ui/core'\r\n\r\n\r\nconst styles = {\r\n   homeContainer: {\r\n      margin: '10px',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n   },\r\n\r\n   gridCard:{\r\n      padding: '20px',\r\n      paddingTop: '25px'\r\n   },\r\n\r\n   gameGridItem: {\r\n      minWidth: '540px',\r\n      maxWidth: '630px'\r\n   }\r\n };\r\n\r\nclass Home extends Component {\r\n  render() {\r\n   const {classes} = this.props\r\n\r\n    return (\r\n       <div>\r\n        <CardContent>\r\n          <Typography variant=\"h5\"> Rules  </Typography>\r\n          <Typography variant=\"body1\"> 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. </Typography>\r\n          <Typography variant=\"body1\"> 2. Any live cell with two or three live neighbors lives on to the next generation. </Typography>\r\n          <Typography variant=\"body1\"> 3. Any live cell with more than three live neighbors dies, as if by overpopulation. </Typography>\r\n          <Typography variant=\"body1\"> 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. </Typography>\r\n        </CardContent>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Home);\r\n","import React, { Component } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {Grid,Card, Paper, CardContent, CardHeader, Typography} from '@material-ui/core'\r\n\r\n\r\nconst styles = {\r\n   homeContainer: {\r\n      margin: '10px',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n   },\r\n\r\n   gridCard:{\r\n      padding: '20px',\r\n      paddingTop: '25px'\r\n   },\r\n\r\n   gameGridItem: {\r\n      minWidth: '540px',\r\n      maxWidth: '630px'\r\n   }\r\n };\r\n\r\nclass Home extends Component {\r\n  render() {\r\n   const {classes} = this.props\r\n\r\n    return (\r\n       <div>\r\n        <CardContent>\r\n          <Typography variant=\"h5\"> About  </Typography>\r\n          <Typography variant=\"body1\"> 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. </Typography>\r\n\r\n        </CardContent>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Home);\r\n","import React, { Component } from 'react';\r\nimport Game from '../Game/Game';\r\nimport Rules from '../Rules/Rules';\r\nimport About from '../About/About';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {Grid,Card, Paper, CardContent, CardHeader, Typography} from '@material-ui/core'\r\n\r\n\r\nconst styles = {\r\n   homeContainer: {\r\n      margin: '10px',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n   },\r\n\r\n   topCard:{\r\n      padding: '20px',\r\n      paddingTop: '25px'\r\n   },\r\n   bottomCard: {\r\n      marginTop: '5px'\r\n   },\r\n   gameGridItem: {\r\n      minWidth: '540px',\r\n      maxWidth: '630px'\r\n   }\r\n };\r\n\r\nclass Home extends Component {\r\n  render() {\r\n   const {classes} = this.props\r\n    return (\r\n      <Grid className={classes.homeContainer} container>\r\n        <Typography variant='h4'> Conway's Game of Life </Typography>\r\n        <Grid item xs={12} id=\"toprow\">\r\n          <Grid container spacing={8} justify=\"center\">\r\n              <Grid item xs={7} className={classes.gameGridItem} >\r\n                <Paper className={classes.topCard} >\r\n                    <Game componentWidth={500}  componentHeight={500}  gridHeight={classes.topCard.height} gridWidth={classes.topCard.width}/>\r\n                </Paper>\r\n              </Grid>\r\n              \r\n              <Grid item xs={10} sm={9} md={4}>\r\n                <Paper className={classes.bottomCard} >\r\n                    <Rules/>\r\n                </Paper>\r\n                <Paper className={classes.bottomCard} >\r\n                  <About/>\r\n                </Paper>\r\n              </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {/* <Grid item xs={12} id=\"bottomrow\">\r\n        <Grid container spacing={8} justify=\"center\">\r\n              <Grid item xs={9} className={classes.gameGridItem} >\r\n                <Paper className={classes.bottomCard} >\r\n                    <About/>\r\n                </Paper>\r\n              </Grid>\r\n          </Grid>\r\n        </Grid> */}\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Home);\r\n","import React, { Component } from 'react';\nimport Home from './Components/Home/Home';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: '#58a4f2',\r\n      main: '#0076bf',\r\n      dark: '#004b8e',\r\n      // contrastText: '#fffff'\r\n      contrastText: 'white'\r\n    },\r\n    secondary: {\r\n      light: '#ff7961',\r\n      main: '#f44336',\r\n      dark: '#ba000d',\r\n      contrastText: '#000'\r\n    }\r\n  },\r\n  typography: {\r\n    useNextVariants: true\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  <MuiThemeProvider theme={theme}>\r\n    <App />\r\n  </MuiThemeProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}