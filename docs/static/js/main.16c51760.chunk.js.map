{"version":3,"sources":["Components/Game/Game.jsx","Components/Rules/Rules.jsx","Components/About/About.jsx","Components/Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleGrid","curGrid","state","nextGrid","setState","createGrid","TotalNodesX","props","componentWidth","TotalNodesY","componentHeight","Math","round","floor","gridSize","firstGrid","curX","curY","i","newArr","j","push","x","y","isAlive","coordX","coordY","secondGrid","Grid","NextGrid","requestAnimationFrame","canvasApp","myCanvas","document","getElementById","ctx","getContext","Width","Height","width","height","w","h","lineWidth","moveTo","lineTo","strokeStyle","stroke","isRunning","incrementGameLoop","forEach","verticalArr","node","beginPath","rect","fillStyle","fill","drawScreen","timer","setTimeout","gameSpeed","newGrid","yAxisArr","assign","lifeAlgorithm","lastGrid","generation","screenGrid","neighbors","getNeighbors","numAlive","nearAlive","keys","key","num","curNodeX","curNodeY","grid","neighborsObj","curNeighbor","newI","newJ","length","handleGridClick","event","getBoundingClientRect","newX","clientX","left","newY","clientY","top","nodeNumberX","nodeNumberY","console","log","concat","handleWheel","deltaY","startStopGame","startNow","clearTimeout","resetGame","gridToReset","Grids","preset","randomizeGame","random","makeAcorn","stepThroughGame","handlePresetChange","target","value","makeGlider","makeGosper","handleGridSizeChange","size","gridSizeString","handleSlider","fps","container","React","createRef","classes","react_default","a","createElement","className","gameContainer","ref","id","onClick","onWheel","style","marginTop","sliderGridSizeContainer","gameSpeedContainer","index_es","Slider_default","slider","aria-labelledby","onChange","gameControls","TextField_default","readOnly","label","generationField","margin","variant","buttonContainer","color","iconButton","Pause_default","gutterBottom","align","PlayArrow_default","RepeatOne_default","Restore_default","formControl","htmlFor","input","name","select","Component","withStyles","theme","display","justifyContent","flexDirection","alignItems","marginBottom","paddingBotton","padding","gridSizeContainer","Home","homeContainer","gridCard","paddingTop","gameGridItem","minWidth","maxWidth","item","xs","spacing","justify","topCard","Components_Game_Game","gridHeight","gridWidth","sm","md","bottomCard","Rules","About","App","Components_Home_Home","Boolean","window","location","hostname","match","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","typography","useNextVariants","ReactDOM","render","styles","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16c51760.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withStyles, } from '@material-ui/core/styles';\nimport  TextField  from '@material-ui/core/TextField';\nimport  Button  from '@material-ui/core/Button';\nimport {Typography, IconButton, InputLabel, List, MenuItem, FormControl, Select, Input, FormHelperText, } from '@material-ui/core';\nimport PlayArrow from '@material-ui/icons/PlayArrow'\nimport Pause from '@material-ui/icons/Pause'\nimport RepeatOne from '@material-ui/icons/RepeatOne'\nimport Slider from '@material-ui/lab/Slider';\nimport Restore from '@material-ui/icons/Restore'\n\n// grid nodes are {x: 0, y:0, xz:gridSize, yz:gridSize}\n\nconst styles = theme => ({\n   gameContainer: {\n     display: 'flex',\n     justifyContent: 'center',\n     flexDirection: 'column',\n     alignItems: 'center',\n     width: '100%',\n     generation: 0,\n   },\n   gameControls: {\n      display: 'flex',\n      width:'100%',\n      justifyContent: 'space-between',\n   },\n   generationField: {\n      width: '175px'\n   },\n   formControl: {\n       width: '120px',\n   },\n   buttonContainer: {\n      marginTop: '5px'\n   },\n   iconButton: {\n      marginBottom: '0px',\n      paddingBotton: '0px'\n   },\n   sliderGridSizeContainer: {\n     display: 'flex',\n     justifyContent: 'center',\n    width: '100%',\n  },\n   slider: {\n      padding: '22px 0px',\n      width:'100%'\n    },\n    gameSpeedContainer: {\n      width: '45%'\n    },\n   gridSizeContainer: {\n      width: '45%'\n   },\n   select: {\n      // color: 'white',\n      // '&:before': {\n      //     borderColor: 'white',\n      // },\n      // '&:after': {\n      //     borderColor: 'white',\n      // }\n  },\n\n})\n\nclass Game extends Component {\n\n   constructor(){\n      super()\n      this.state = {\n         TotalNodesX: 0,\n         TotalNodesY: 0,\n         curGrid: 'Grid',\n         nextGrid: 'NextGrid',\n         Grid: [],\n         NextGrid: [],\n         isRunning: false,\n         gridSize : 12,\n         generation : 0,\n         preset: \"\",\n         gameSpeed: 500,\n         gridSizeString: '',\n         fps: 0,\n      }\n      this.container = React.createRef();\n      this.timer = null;\n   }\n\n   toggleGrid = () => {\n      let curGrid = this.state.curGrid;\n      let nextGrid = this.state.nextGrid;\n\n      if(curGrid === 'Grid'){\n         curGrid = 'NextGrid'\n         nextGrid = 'Grid'\n      }else{\n         curGrid = 'Grid'\n         nextGrid = 'NextGrid'\n      }\n\n      this.setState({curGrid})\n   }\n\n   componentDidMount() {\n     this.createGrid()\n   }\n\n   createGrid = () => {\n    const width = this.props.componentWidth;\n    const height = this.props.componentHeight;\n\n    let TotalNodesX = width\n    let TotalNodesY = height\n\n    TotalNodesX = Math.round(Math.floor(TotalNodesX / this.state.gridSize));\n    TotalNodesY = Math.round(Math.floor(TotalNodesY / this.state.gridSize));\n\n    const firstGrid = [];\n\n    let curX = 0;\n    let curY = 0;\n    for (let i = 0; i < TotalNodesX; i++){\n       if(i !== 0) curX += this.state.gridSize;\n       const newArr = [];\n    \n       for(let j = 0; j < TotalNodesY; j++){\n          if(j === 0) curY = 0;\n          else curY += this.state.gridSize;\n          newArr.push({x: curX, y: curY, isAlive: false, coordX: i, coordY: j})\n       }\n    \n       firstGrid.push(newArr)\n    }\n\n    const secondGrid = [];\n\n     curX = 0;\n     curY = 0;\n    for (let i = 0; i < TotalNodesX; i++){\n       if(i !== 0) curX += this.state.gridSize;\n       const newArr = [];\n    \n       for(let j = 0; j < TotalNodesY; j++){\n          if(j === 0) curY = 0;\n          else curY += this.state.gridSize;\n          newArr.push({x: curX, y: curY, isAlive: false, coordX: i, coordY: j})\n       }\n    \n       secondGrid.push(newArr)\n    }\n\n    this.setState({Grid: firstGrid, NextGrid: secondGrid, TotalNodesX, TotalNodesY, })\n    requestAnimationFrame(() => this.canvasApp())\n   }\n\n   canvasApp = () => {\n      var myCanvas = document.getElementById('myCanvas');\n      if(!myCanvas) return\n      var ctx = myCanvas.getContext('2d');\n    \n      const Width = this.state.gridSize * this.state.TotalNodesX;\n      const Height = this.state.gridSize * this.state.TotalNodesY;\n    \n      myCanvas.width = Width;\n      myCanvas.height = Height;\n    \n    \n      const drawScreen = () => {\n    \n       //init grid square size\n        const dx = this.state.gridSize;\n        const dy = this.state.gridSize;\n    \n       \n        var x = 0;\n        var y = 0;\n        var w = myCanvas.width;\n        var h = myCanvas.height;\n    \n        var xy = 10;\n    \n        ctx.lineWidth = 1;\n    \n        ctx.moveTo(x, y);\n        ctx.lineTo(w, y);\n        ctx.strokeStyle=\"grey\";\n        ctx.stroke();\n        // draw horizontal lines\n        while (y < h) {\n           y = y + this.state.gridSize;\n           ctx.moveTo(x, y);\n           ctx.lineTo(w, y);\n           ctx.strokeStyle=\"grey\";\n           ctx.stroke();\n        }\n    \n        //draw vertical lines\n        y = 0;\n        xy = 10;\n        ctx.moveTo(x, y);\n        ctx.lineTo(x, h);\n        ctx.stroke();\n        while (x < w) {\n           x = x + this.state.gridSize;\n           ctx.moveTo(x, y);\n           ctx.lineTo(x, h);\n           ctx.stroke();\n        }\n\n         if(this.state.isRunning){\n            this.incrementGameLoop()\n         }\n\n         // draw a box (each square is this.state.gridSizepx wide and )\n         this.state[this.state.curGrid].forEach((verticalArr, i) => {\n            verticalArr.forEach((node, j) => {\n               if(node.isAlive){\n                  ctx.beginPath()\n                  ctx.rect(node.x, node.y, this.state.gridSize,this.state.gridSize)\n                  ctx.fillStyle = \"black\"\n                  ctx.fill();\n               }else{\n                  ctx.beginPath()\n                  ctx.rect(node.x+1, node.y+1, this.state.gridSize-2,this.state.gridSize-2)\n                  ctx.fillStyle = \"white\"\n                  ctx.fill();\n               }\n            })\n         })\n         \n      }\n      drawScreen();\n      if(this.state.isRunning){\n         this.timer = setTimeout(() => {requestAnimationFrame(() => this.canvasApp())}, 100 - this.state.gameSpeed)\n      }\n      \n\n    }//end canvasApp\n\n   incrementGameLoop = () => {\n      let newGrid = []\n      this.state[this.state.curGrid].forEach((verticalArr, i) => {\n         const yAxisArr = [];\n         verticalArr.forEach((node, j) => {\n            yAxisArr.push(Object.assign({}, node))\n         })\n         newGrid.push(yAxisArr)\n      })\n\n      newGrid = this.lifeAlgorithm(newGrid)\n\n      const lastGrid = this.state[this.state.curGrid]\n\n      //swap before state swap so this looks backwards right now\n      // this.toggleGrid()\n\n\n      this.setState({Grid: newGrid, NextGrid: lastGrid, generation: this.state.generation + 1})\n   }\n\n   lifeAlgorithm = (newGrid) => {\n     //get neighbors and run 4 rules of life\n\n     // screenGrid is where all nodes are checked (and what is currently displayed on screen)\n     //nextGrid is where all changes are made\n     const screenGrid = this.state.Grid\n\n      this.state.Grid.forEach((verticalArr, i) => {\n         verticalArr.forEach((node, j) => {\n            const neighbors = this.getNeighbors(screenGrid, i,j);\n\n            //count the living neighbors\n            let numAlive = 0;\n            const nearAlive = []\n            Object.keys(neighbors).forEach(key => {\n            const node = neighbors[key]\n            if(node.isAlive) {\n               numAlive += 1;\n               // console.log({num: key, curNodeX: i, curNodeY: j, aliveX: node.coordX, aliveY: node.coordY})\n            } else nearAlive.push({num:key, curNodeX: node.coordX, curNodeY: node.coordY })\n            })\n\n            const curNode = newGrid[i][j]\n            // if(numAlive > 0 && curNode.isAlive) console.log({x: curNode.coordX, y: curNode.coordY})\n            if( newGrid[i][j].isAlive && numAlive < 2 ) newGrid[i][j].isAlive = false; //Any live cell with fewer than two live neighbours dies (referred to as underpopulation or exposure[1]).\n            else if( !newGrid[i][j].isAlive && numAlive === 3 ) newGrid[i][j].isAlive = true; //Any dead cell with exactly three live neighbours will come to life.\n            else if( numAlive > 3 && newGrid[i][j].isAlive ) newGrid[i][j].isAlive = false; //Any live cell with more than three live neighbours dies (referred to as overpopulation or overcrowding).\n            else if( newGrid[i][j].isAlive && (numAlive >= 2 && numAlive <= 3)  ) newGrid[i][j].isAlive = true; //Any live cell with two or three live neighbours lives, unchanged, to the next generation.\n\n         })\n      })//finshed grid check\n      \n      \n      return newGrid;\n   }\n\n   getNeighbors = (grid, i, j) => {\n      const neighborsObj = {};\n      const curNode = grid[i][j];\n      \n      let curNeighbor = 1;\n      while(curNeighbor < 9){\n        let newI = i;\n        let newJ = j;\n         switch(curNeighbor){\n           case 1: newJ--;\n                   if(!grid[newI][newJ]) newJ = grid[newI].length - 1\n                   break;\n           case 2: newI++;\n                   if(!grid[newI]) newI = 0;\n                   newJ--;\n                   if(!grid[newI][newJ]) newJ = grid[newI].length - 1\n                   break;\n           case 3: newI++;\n                   if(!grid[newI]) newI = 0;\n                   break;\n           case 4: newI++;\n                   if(!grid[newI]) newI = 0;\n                   newJ++;\n                   if(!grid[newI][newJ]) newJ = 0;\n                   break;\n           case 5: newJ++;\n                   if(!grid[newI][newJ]) newJ = 0;\n                   break;\n           case 6: newI--;\n                   if(!grid[newI]) newI = grid.length - 1\n                   newJ++;\n                   if(!grid[newI][newJ]) newJ = 0;\n                   break;\n           case 7: newI--;\n                   if(!grid[newI]) newI = grid.length - 1\n                   break;\n           case 8: newI--;\n                   if(!grid[newI]) newI = grid.length - 1\n                   newJ--;\n                   if(!grid[newI][newJ]) newJ = grid[newI].length - 1\n         }\n\n         // if(i === 0 && j === 0)console.log(`num:${Object.keys(neighborsObj).length + 1} i:${newI} j:${newJ} liveNodeX:${i} j:${j}`)\n\n         neighborsObj[curNeighbor] = Object.assign({}, grid[newI][newJ])\n\n        curNeighbor++;\n      }//end while\n\n      // if(this.state.x && this.state.y && this.state.x ==i && this.state.y == j){\n      //    console.log(neighborsObj)\n      // } \n\n      return neighborsObj;\n   }\n\n    handleGridClick = event => {\n      if(!this.state.isRunning){\n\n         const rect = document.getElementById('myCanvas').getBoundingClientRect()\n\n         let newX = event.clientX - rect.left;\n         let newY = event.clientY - rect.top;\n\n         const nodeNumberX = Math.floor(newX / this.state.gridSize)\n         const nodeNumberY = Math.floor(newY / this.state.gridSize)\n\n         const curGrid = this.state.Grid\n         \n         if(curGrid[nodeNumberX] && curGrid[nodeNumberX][nodeNumberY]){\n            curGrid[nodeNumberX][nodeNumberY].isAlive = !curGrid[nodeNumberX][nodeNumberY].isAlive\n            console.log(`clicked: x:${curGrid[nodeNumberX][nodeNumberY].coordX}, y: ${curGrid[nodeNumberX][nodeNumberY].coordY}`)\n         }\n\n         this.setState({Grid: curGrid})\n         this.canvasApp()\n       }\n   }\n\n   handleWheel = event => {\n      if(event.deltaY > 0){\n         console.log('wheelDown')\n      }else console.log('wheelup')\n   }\n\n   startStopGame = () => {\n      const startNow = !this.state.isRunning\n\n      this.setState({ isRunning: !this.state.isRunning, })\n\n      if(startNow) this.timer = setTimeout(() => {requestAnimationFrame(() => this.canvasApp())}, 100 - this.state.gameSpeed)\n      else clearTimeout(this.timer)\n   }\n\n   resetGame = () => {\n      this.setState({isRunning: false})\n\n      const gridToReset = this.state.Grid\n\n      gridToReset.forEach((verticalArr, i) => {\n         verticalArr.forEach((node, j) => {\n            node.isAlive = false;\n         })\n      })\n\n      this.setState({Grids: gridToReset })\n      this.canvasApp();\n      this.setState({ generation: 0, preset: ''})\n   }\n\n   randomizeGame = () => {\n      this.setState({isRunning: false, generation: 0})\n\n      const gridToReset = this.state.Grid\n\n      gridToReset.forEach((verticalArr, i) => {\n         verticalArr.forEach((node, j) => {\n            node.isAlive = false;\n            const roll = Math.round(Math.random()*10);\n            if (roll > 8) node.isAlive = true;\n         })\n      })\n\n      this.setState({Grid: gridToReset})\n      this.canvasApp();\n   }\n\n   makeAcorn = () => {\n      this.resetGame();\n\n      //get start node\n      const firstX = Math.round((this.state.TotalNodesX / 2) - this.state.TotalNodesX / 4)\n      const firstY = Math.round(this.state.TotalNodesY / 2)\n      let x = firstX\n      let y = firstY\n\n      this.setState({x, y})//use to debug conway rule error with neighbors (maybe double buffer grid error)\n\n      const newGrid = this.state.Grid\n\n      newGrid[x][y].isAlive = true;\n      x++\n      newGrid[x][y].isAlive = true;\n      y -= 2;\n      newGrid[x][y].isAlive = true;\n      x+=2;\n      y++;\n      newGrid[x][y].isAlive = true;\n      y++;\n      x++;\n      newGrid[x][y].isAlive = true;\n      x++\n      newGrid[x][y].isAlive = true;\n      x++\n      newGrid[x][y].isAlive = true;\n\n      this.canvasApp()\n   }\n\n   stepThroughGame = () => {\n      this.incrementGameLoop()\n      this.canvasApp();\n   }\n\n   handlePresetChange = event => {\n      if(event.target.value === 'Acorn') this.makeAcorn();\n      else if (event.target.value === 'Random') this.randomizeGame()\n      else if (event.target.value === 'Glider') this.makeGlider()\n      else if (event.target.value === 'Gosper') this.makeGosper();\n\n      this.setState({ preset: event.target.value });\n   };\n\n   handleGridSizeChange = event => {\n     this.resetGame()\n      console.log(event.target.value)\n      let size;\n      if(event.target.value === 'Largest') size = 25;\n      else if(event.target.value === 'Large') size = 20;\n      else if(event.target.value === 'Medium') size = 15;\n      else if(event.target.value === 'Small') size = 10;\n      else if(event.target.value === 'Smallest') size = 5;\n      console.log(size)\n      this.setState({ gridSize: size, gridSizeString: event.target.value });\n      this.createGrid();\n   };\n\n   handleSlider = (event, value) => {\n      this.setState({gameSpeed: value})\n   }\n\n   makeGlider = () => {\n    this.resetGame();\n\n    //get start node\n    const firstX = Math.round((this.state.TotalNodesX / 2) - this.state.TotalNodesX / 4)\n    const firstY = Math.round(this.state.TotalNodesY / 2)\n    let x = firstX\n    let y = firstY\n\n    this.setState({x, y})//use to debug conway rule error with neighbors (maybe double buffer grid error)\n\n    const newGrid = this.state.Grid\n\n    newGrid[x][y].isAlive = true;\n    x++\n    newGrid[x][y].isAlive = true;\n    y -= 2;\n    newGrid[x][y].isAlive = true;\n    x++;\n    y++;\n    newGrid[x][y].isAlive = true;\n    y++;\n    newGrid[x][y].isAlive = true;\n\n    this.canvasApp()\n   }\n\n   makeGosper = () => {\n    this.resetGame();\n\n    //get start node\n    const firstX = 1\n    const firstY = 8\n    let x = firstX\n    let y = firstY\n\n    this.setState({x, y})//use to debug conway rule error with neighbors (maybe double buffer grid error)\n\n    const newGrid = this.state.Grid\n    //first 4square\n    newGrid[x][y].isAlive = true;\n    y++\n    newGrid[x][y].isAlive = true;\n    x++\n    newGrid[x][y].isAlive = true;\n    y--;\n    newGrid[x][y].isAlive = true;\n\n    //donut\n    x+=7;\n    y++;\n    newGrid[x][y].isAlive = true;\n    y++;\n    newGrid[x][y].isAlive = true;\n    x++;\n    newGrid[x][y].isAlive = true;\n    y-=2;\n    newGrid[x][y].isAlive = true;\n    x++;\n    newGrid[x][y].isAlive = true;\n    y++;\n    newGrid[x][y].isAlive = true;\n\n    //glider\n    x+=6;\n    y++;\n    newGrid[x][y].isAlive = true;\n    y++;\n    newGrid[x][y].isAlive = true;\n    y++;\n    newGrid[x][y].isAlive = true;\n    x++;\n    y-=2;\n    newGrid[x][y].isAlive = true;\n    x++;\n    y++;\n    newGrid[x][y].isAlive = true;\n\n\n    //donut\n    y-=4;\n    x+=4\n    newGrid[x][y].isAlive = true;\n    y++;\n    newGrid[x][y].isAlive = true;\n    x++;\n    newGrid[x][y].isAlive = true;\n    y-=2;\n    newGrid[x][y].isAlive = true;\n    x++;\n    newGrid[x][y].isAlive = true;\n    y++;\n    newGrid[x][y].isAlive = true;\n\n    //glider\n    y+=11;\n    newGrid[x][y].isAlive = true;\n    y++;\n    newGrid[x][y].isAlive = true;\n    y++;\n    x++;\n    newGrid[x][y].isAlive = true;\n    y-=2;\n    newGrid[x][y].isAlive = true;\n    x++;\n    newGrid[x][y].isAlive = true;\n\n    //glider\n    x+=9;\n    y-=3;\n    newGrid[x][y].isAlive = true;\n    y--;\n    newGrid[x][y].isAlive = true;\n    y--;\n    newGrid[x][y].isAlive = true;\n    x++;\n    newGrid[x][y].isAlive = true;\n    x++;\n    y++;\n    newGrid[x][y].isAlive = true;\n\n    //square\n\n\n\n    y-=7\n    x-=2\n    newGrid[x][y].isAlive = true;\n    y--;\n    newGrid[x][y].isAlive = true;\n    x--;\n    newGrid[x][y].isAlive = true;\n    y++;\n    newGrid[x][y].isAlive = true;\n\n\n    this.canvasApp()\n   }\n   \n\n   render() {\n      const {classes} = this.props\n      if(!this.state.isRunning) this.timer = null;\n\n      return (\n         <div className={classes.gameContainer} ref={this.container}>\n            <canvas id=\"myCanvas\" width='0' height='0' onClick={this.handleGridClick} onWheel={this.handleWheel} />\n\n            <hr style={{width: '100%', marginTop: '20px'}}></hr>\n            <div className={classes.sliderGridSizeContainer}>\n\n              <div className={classes.gameSpeedContainer} >\n                <Typography id=\"label\">Game Speed</Typography>\n                <Slider\n                    classes={{ container: classes.slider }}\n                    value={this.state.gameSpeed}\n                    aria-labelledby=\"label\"\n                    onChange={this.handleSlider}\n                />\n              </div>\n\n              {/* <div className={classes.gridSizeContainer}>\n                <FormControl id='GridPicker' className={this.props.classes.formControl} color={'inherit'}>\n                  <InputLabel htmlFor=\"gridSize-helper\">Grid Size</InputLabel>\n                     <Select\n                        value={this.state.gridSizeString}\n                        onChange={this.handleGridSizeChange}\n                        input={<Input name=\"gridSize\" id=\"gridSize-helper\" />}\n                        className={this.props.classes.select}\n                     >\n\n                        <MenuItem value={'Largest'}>\n                           Largest\n                        </MenuItem>\n\n                        <MenuItem value={'Large'}>\n                           Large\n                        </MenuItem>\n\n                        <MenuItem value={'Medium'}>\n                           Medium\n                        </MenuItem>\n\n                        <MenuItem value={'Small'}>\n                           Small\n                        </MenuItem>\n\n                        <MenuItem value={'Smallest'}>\n                           Smallest\n                        </MenuItem>\n\n                     </Select>\n                     <FormHelperText className={this.props.classes.select}>Select a layout</FormHelperText>\n                </FormControl>\n              </div> */}\n            </div>\n\n            <div className={classes.gameControls}>\n\n               <TextField\n                  readOnly\n                  id=\"outlined-uncontrolled\"\n                  label=\"Generation\"\n                  className={classes.generationField}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  value={this.state.generation}\n               />\n               {this.state.isRunning ? \n                  <div className={classes.buttonContainer}>\n                     <IconButton onClick={this.startStopGame} color='primary' className={classes.iconButton}>\n                        <Pause/>\n                     </IconButton>\n\n                     <Typography variant=\"caption\" gutterBottom align=\"center\">\n                        Pause\n                     </Typography>\n                  </div>\n                  :\n                  <div className={classes.buttonContainer}>\n                     <IconButton onClick={this.startStopGame} color='primary' className={classes.iconButton}>\n                        <PlayArrow/>\n                     </IconButton>\n\n                     <Typography variant=\"caption\" gutterBottom align=\"center\">\n                        Play\n                     </Typography>\n                  </div>\n               }\n\n                  <div className={classes.buttonContainer}>\n                     <IconButton onClick={this.stepThroughGame} color='secondary'>\n                        <RepeatOne/>\n                     </IconButton>\n                     <Typography variant=\"caption\" gutterBottom align=\"center\">\n                        Step\n                     </Typography>\n                  </div>\n                  \n                  <div className={classes.buttonContainer}>\n                     <IconButton onClick={this.resetGame}>\n                        <Restore/>\n                     </IconButton>\n                     <Typography variant=\"caption\" gutterBottom align=\"center\">\n                        Reset\n                     </Typography>\n                  </div>\n\n               <FormControl id='presets' className={this.props.classes.formControl} color={'inherit'}>\n                  <InputLabel htmlFor=\"preset-helper\">Presets</InputLabel>\n                     <Select\n                        value={this.state.preset}\n                        onChange={this.handlePresetChange}\n                        input={<Input name=\"preset\" id=\"preset-helper\" />}\n                        className={this.props.classes.select}\n                     >\n\n                        <MenuItem value='Random'>\n                           Random\n                        </MenuItem>\n\n                        <MenuItem value='Acorn'>\n                           Acorn\n                        </MenuItem>\n\n                        <MenuItem value='Glider'>\n                           Glider\n                        </MenuItem>\n\n                        <MenuItem value='Gosper'>\n                           Gosper Glider Gun\n                        </MenuItem>\n\n                     </Select>\n                     <FormHelperText className={this.props.classes.select}>Select a layout</FormHelperText>\n               </FormControl>\n               \n            </div>\n\n         </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Game);\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport {Grid,Card, Paper, CardContent, CardHeader, Typography} from '@material-ui/core'\n\n\nconst styles = {\n   homeContainer: {\n      margin: '10px',\n      display: 'flex',\n      justifyContent: 'center',\n   },\n\n   gridCard:{\n      padding: '20px',\n      paddingTop: '25px'\n   },\n\n   gameGridItem: {\n      minWidth: '540px',\n      maxWidth: '630px'\n   }\n };\n\nclass Home extends Component {\n  render() {\n   const {classes} = this.props\n\n    return (\n       <div>\n        <CardContent>\n          <Typography variant=\"h5\"> Rules  </Typography>\n          <Typography variant=\"body1\"> 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. </Typography>\n          <Typography variant=\"body1\"> 2. Any live cell with two or three live neighbors lives on to the next generation. </Typography>\n          <Typography variant=\"body1\"> 3. Any live cell with more than three live neighbors dies, as if by overpopulation. </Typography>\n          <Typography variant=\"body1\"> 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. </Typography>\n        </CardContent>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Home);\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport {Grid,Card, Paper, CardContent, CardHeader, Typography} from '@material-ui/core'\n\n\nconst styles = {\n   homeContainer: {\n      margin: '10px',\n      display: 'flex',\n      justifyContent: 'center',\n   },\n\n   gridCard:{\n      padding: '20px',\n      paddingTop: '25px'\n   },\n\n   gameGridItem: {\n      minWidth: '540px',\n      maxWidth: '630px'\n   }\n };\n\nclass Home extends Component {\n  render() {\n   const {classes} = this.props\n\n    return (\n       <div>\n        <CardContent>\n          <Typography variant=\"h5\"> About  </Typography>\n          <Typography variant=\"body2\"> In 1968, mathematician John Conway began formulating theories of cellular automata implementations that would meet John Von Neumann’s two general requirements for life. Conway chose 4 rules to create these 2d automata: </Typography>\n          <Typography variant='subtitle2'>1-\tThere should be no explosive growth.</Typography>\n          <Typography variant='subtitle2'>2-\tThere should exist small initial patterns with chaotic, unpredictable outcomes.</Typography>\n          <Typography variant='subtitle2'>3-\tThere should be potential for von Neumann universal constructors.</Typography>\n          <Typography variant='subtitle2'>4-\tThe rules should be as simple as possible, whilst adhering to the above constraints.</Typography>\n\n        </CardContent>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Home);\n","import React, { Component } from 'react';\nimport Game from '../Game/Game';\nimport Rules from '../Rules/Rules';\nimport About from '../About/About';\nimport { withStyles } from '@material-ui/core/styles';\nimport {Grid,Card, Paper, CardContent, CardHeader, Typography} from '@material-ui/core'\n\n\nconst styles = {\n   homeContainer: {\n      margin: '10px',\n      display: 'flex',\n      justifyContent: 'center',\n   },\n\n   topCard:{\n      padding: '20px',\n      paddingTop: '25px'\n   },\n   bottomCard: {\n      marginTop: '5px'\n   },\n   gameGridItem: {\n      minWidth: '540px',\n      maxWidth: '630px'\n   }\n };\n\nclass Home extends Component {\n  render() {\n   const {classes} = this.props\n    return (\n      <Grid className={classes.homeContainer} container>\n        <Typography variant='h4'> Conway's Game of Life </Typography>\n        <Grid item xs={12} id=\"toprow\">\n          <Grid container spacing={8} justify=\"center\">\n              <Grid item xs={7} className={classes.gameGridItem} >\n                <Paper className={classes.topCard} >\n                    <Game componentWidth={500}  componentHeight={500}  gridHeight={classes.topCard.height} gridWidth={classes.topCard.width}/>\n                </Paper>\n              </Grid>\n              \n              <Grid item xs={10} sm={9} md={4}>\n                <Paper className={classes.bottomCard} >\n                    <Rules/>\n                </Paper>\n                <Paper className={classes.bottomCard} >\n                  <About/>\n                </Paper>\n              </Grid>\n          </Grid>\n        </Grid>\n        {/* <Grid item xs={12} id=\"bottomrow\">\n        <Grid container spacing={8} justify=\"center\">\n              <Grid item xs={9} className={classes.gameGridItem} >\n                <Paper className={classes.bottomCard} >\n                    <About/>\n                </Paper>\n              </Grid>\n          </Grid>\n        </Grid> */}\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Home);\n","import React, { Component } from 'react';\nimport Home from './Components/Home/Home';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#58a4f2',\n      main: '#0076bf',\n      dark: '#004b8e',\n      // contrastText: '#fffff'\n      contrastText: 'white'\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000'\n    }\n  },\n  typography: {\n    useNextVariants: true\n  }\n});\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <App />\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}