{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["CELL_SIZE","WIDTH","HEIGHT","Cell","_this$props","this","props","x","y","react_default","a","createElement","className","style","left","concat","top","width","height","React","Component","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","cells","isRunning","interval","genCount","step","handleClick","event","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","setState","makeCells","runGame","runIteration","stepthroughGame","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","target","value","handleClear","makeEmptyBoard","handleRandom","random","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","push","_this2","newBoard","neighbors","calculateNeighbors","prevState","setTimeout","dirs","i","length","dir","y1","x1","_this3","backgroundSize","onClick","ref","n","map","cell","Game_Cell","key","onChange","App","src_Game_0","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.556aa9c2.chunk.js","sourcesContent":["import React from 'react';\nimport './Game.css';\n\nconst CELL_SIZE = 15;\nconst WIDTH = 800;\nconst HEIGHT = 600;\n\n\nclass Cell extends React.Component {\n    render() {\n      const { x, y} = this.props;\n      return (\n          <div className=\"Cell\" style={{\n            left: `${CELL_SIZE * x + 1}px`,\n            top: `${CELL_SIZE * y + 1}px`,\n            width: `${CELL_SIZE - 1}px`,\n            height: `${CELL_SIZE -1}px`,\n          }} />\n      );\n    }\n}\n\nclass Game extends React.Component {\n    constructor() {\n        super();\n        this.rows = HEIGHT/CELL_SIZE;\n        this.cols = WIDTH/CELL_SIZE;\n        this.board = this.makeEmptyBoard();\n    }\n\n    state = {\n        cells: [],\n        isRunning: false,\n        interval: 100,\n        genCount: 0,\n        step: false,\n    }\n\n    // create an empty board\n    makeEmptyBoard() {\n        let board = [];\n        for (let y = 0; y < this.rows; y++) {\n          board[y] = [];\n        for (let x = 0; x < this.cols; x++) {\n          board[y][x] = false;\n        }\n     }\n     return board;\n    }\n\n    getElementOffset() {\n        const rect = this.boardRef.getBoundingClientRect();\n        const doc = document.documentElement;\n\n        return {\n            x : (rect.left + window.pageXOffset) - doc.clientLeft,\n            y:  (rect.top + window.pageYOffset) - doc.clientTop,\n        };\n    }\n\n    // create cells from this.board\n    makeCells() {\n        let cells = [];\n        for (let y = 0; y < this.rows; y++) {\n          for (let x = 0; x < this.cols; x++) {\n              if (this.board[y][x]) {\n                  cells.push({ x, y });\n              }\n           }\n        }\n        return cells;\n    }\n\n    handleClick = (event) => {\n        const elemOffset = this.getElementOffset();\n        const offsetX = event.clientX - elemOffset.x;\n        const offsetY = event.clientY - elemOffset.y;\n\n        const x = Math.floor(offsetX / CELL_SIZE);\n        const y = Math.floor(offsetY / CELL_SIZE);\n\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n            this.board[y][x] = !this.board[y][x];\n        }\n        this.setState({ cells: this.makeCells() });\n    }\n\n    runGame = () => {\n        this.setState({ isRunning: true, step: false });\n        this.runIteration();\n    }\n\n    stepthroughGame = () => {\n        this.setState({ isRunning: true, step: true});\n        this.runIteration();\n        this.setState({ isRunning: false });\n    }\n\n    stopGame = () => {\n        this.setState({ isRunning: false });\n        if (this.timeoutHandler) {\n            window.clearTimeout(this.timeoutHandler);\n            this.timeoutHandler = null;\n        }\n    }\n\n    runIteration() {\n        let newBoard = this.makeEmptyBoard();\n\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                let neighbors = this.calculateNeighbors(this.board, x , y);\n                if (this.board[y][x]) {\n                    if (neighbors === 2 || neighbors === 3) {\n                        newBoard[y][x] = true;\n                    } else {\n                        newBoard[y][x] = false;\n                    }\n                } else {\n                    if (!this.board[y][x] && neighbors === 3) {\n                        newBoard[y][x] = true;\n                    }\n                }\n            }\n        }\n        this.board = newBoard;\n      \n        this.setState((prevState) => (\n            {genCount: prevState.genCount + 1, cells: this.makeCells(),}\n        ))\n        if(!this.state.step) {\n            this.timeoutHandler = window.setTimeout(() => {\n                this.runIteration();\n            },(this.state.interval));\n        }\n    }\n\n   /**\n     * Calculate the number of neighbors at point (x, y)\n     * @param {Array} board \n     * @param {int} x \n     * @param {int} y \n     */\n\n\n    // this method below computes the number of neighbors of given (x , y)\n    calculateNeighbors(board, x , y) {\n        let neighbors = 0;\n        const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n        for (let i = 0; i < dirs.length; i++) {\n           const dir = dirs[i];\n           let y1 = y + dir[0];\n           let x1 = x + dir[1];\n\n           if(x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\n              neighbors++;\n           }\n        }\n        return neighbors;\n    }\n\n    handleIntervalChange = (event) => {\n        this.setState({ interval: event.target.value });\n    }\n\n    handleClear = () => {\n        this.board = this.makeEmptyBoard();\n        this.setState({ cells: this.makeCells() , genCount: 0 });\n    }\n\n    handleRandom = () => {\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                this.board[y][x] = (Math.random() >= 0.5);\n            }\n        }\n        this.setState({ cells: this.makeCells() });\n    }\n\n    \n    render() {\n        const { isRunning } = this.state;\n        return (\n            <div>\n                <div className=\"Board\"\n                style={{width: WIDTH, height: HEIGHT,backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}}\n                onClick={this.handleClick}\n                ref={(n) => {this.boardRef = n; }}>\n                {this.state.cells.map(cell => (\n                  <Cell \n                  x={cell.x} \n                  y={cell.y} \n                  key={`${cell.x}, ${cell.y}`}\n                   />\n                ))}\n                </div>\n\n            <div className=\"controls\">\n            Update every <input value={this.state.interval} onChange={this.handleIntervalChange} /> msec\n            { isRunning ?\n                <button className=\"button\" onClick={this.stopGame}>Stop</button>:\n                <button className=\"button\" onClick={this.runGame}>Run</button>\n            }\n            <button className=\"button\" onClick={this.handleRandom}>Random</button>\n            <button className=\"button\" onClick={this.stepthroughGame}>Step</button>\n            <button className=\"button\" onClick={this.handleClear}>Clear</button>\n            <h4>Generation: {this.state.genCount}</h4>\n            </div>\n            <div className = \"Rules\">\n            <h4>Game Rules</h4>\n            <ol>\n            <li>Any live cell with fewer than two live neighbors dies, as if caused by under population.</li>\n            <li>Any live cell with two or three live neighbors lives on to the next generation.</li>\n            <li>Any live cell with more than three live neighbors dies, as if by overpopulation.</li>\n            <li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>\n            </ol>\n            </div>\n            <div className = \"About\">\n             <h4>About</h4>\n             <p>Conway's Game of Life is an imaginary cellular automation made by the british mathematician\n            John Horton Conway in 1970.This is a zero-player game, meaning its evolution is determined by its initial state\n            ,requiring no further input.The reason it is called a game is because people who play the game can set\n            it up in different ways to make it do different things.It is on the of the first ever simulation games that\n            represent things that happen in real life.</p>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Game from './Game';\n\nclass App extends Component {\n  render() {\n    return (\n     <div className=\"App\">\n        <h1>Conway's Game of Life- Rachel DiCesare</h1>\n          <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}